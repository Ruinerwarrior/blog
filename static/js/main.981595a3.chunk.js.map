{"version":3,"sources":["images/background.jpg","images/cpp.png","images/csharp.png","images/js.png","Page.tsx","components/MenuItem/NavItem.tsx","components/MenuItem/Image.tsx","components/MenuItem/index.tsx","components/Header/Hero.tsx","components/Header/NavBar.tsx","components/Header/NavBarItems.tsx","components/Header/Section.tsx","components/Header/index.tsx","Api.tsx","components/PostsWrapper/index.tsx","components/SortItem/Button.tsx","components/SortItem/Icon.tsx","components/SortItem/index.tsx","components/PostsHeader/Header.tsx","components/PostsHeader/index.tsx","components/Post/Article.tsx","components/Post/PostDate.tsx","components/Post/Text.tsx","components/Post/Title.tsx","components/Post/VoteContainer.tsx","components/Post/VoteCount.tsx","components/Post/VoteIcon.tsx","components/Post/Vote.tsx","components/Post/MaximizeButton.tsx","components/Post/index.tsx","components/Posts/List.tsx","components/Posts/index.tsx","components/Content/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Page","styled","div","BaseNavItem","NavLink","props","color","NavItem","className","activeClassName","Image","img","MenuItem","title","route","image","exact","to","src","Hero","section","NavBar","nav","NavBarItems","Section","MenuItems","js","csharp","cpp","Header","map","m","key","headers","getAll","a","fetch","method","response","ok","Error","status","json","FilterState","PostsContext","React","PostsWrapper","children","posts","setPosts","location","useLocation","Api","console","log","blogs","pathname","filterOnLanguage","substr","filter","filtered","b","language","sortOnDate","filterState","sorted","ASC","sort","moment","date","diff","Provider","value","sortOnPopularity","votes","Button","Icon","FontAwesomeIcon","EmptyIcon","SortItem","isSelected","setFilter","None","setFilterState","clickCount","setClickCount","icon","DESC","faAngleUp","faAngleDown","onClick","PostsHeader","selected","setSelected","Article","article","isMaximized","PostDate","p","Text","Title","VoteContainer","VoteCount","VoteIcon","Vote","changeVote","nrOfVotes","setVote","isVote","setIsVote","faThumbsUp","MaximizeButton","Post","file","setIsMaximized","innerHtml","setInnerHtml","html","Date","format","dangerouslySetInnerHTML","__html","List","Posts","i","Content","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.981595a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.953c074d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cpp.58bf6fc7.png\";","module.exports = __webpack_public_path__ + \"static/media/csharp.1f8d2604.png\";","module.exports = __webpack_public_path__ + \"static/media/js.772175ff.png\";","import styled from \"styled-components\";\r\n\r\nconst Page = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow-y: scroll;\r\n`\r\n\r\nexport default Page;","import * as React from \"react\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst BaseNavItem = styled(NavLink)`\r\n  display: grid;\r\n  justify-items: center;\r\n  grid-template-columns: 1fr 1fr 1fr;\r\n  background-color: rgba(0,0,0,0);\r\n  filter: drop-shadow(0 0 50px ${props => props.color});\r\n`;\r\n\r\nconst NavItem = styled(({ className, ...props }) => <BaseNavItem {...props} activeClassName={className} />)`\r\n  color: blue\r\n`;\r\n\r\nexport default NavItem;","import styled from \"styled-components\";\r\n\r\nconst Image = styled.img`\r\n  grid-column: 2;\r\n  height: 100%;\r\n  background-color: rgba(0,0,0,0);\r\n  &:hover {\r\n    height: 110%;\r\n  }\r\n`;\r\n\r\nexport default Image;","import * as React from \"react\";\r\n\r\nimport NavItem from \"./NavItem\";\r\nimport Image from \"./Image\";\r\n\r\n\r\ninterface IProps {\r\n  title: string;\r\n  route: string;\r\n  image: string;\r\n  color: string;\r\n}\r\n\r\nconst MenuItem: React.FunctionComponent<IProps> = ({ title, route, image, color }) => (\r\n  <NavItem\r\n    color={color}\r\n    exact={route === \"\"}\r\n    to={`${route}`}\r\n  >\r\n    <Image src={image}/>\r\n  </NavItem >\r\n);\r\n\r\nexport default MenuItem;","import styled from \"styled-components\";\r\n\r\nimport img from \"../../images/background.jpg\";\r\n\r\nconst Hero = styled.section`\r\n  grid-column-start: 1;\r\n  grid-column-end: 4;\r\n  grid-row-start: 1;\r\n  grid-row-end: 3;\r\n  background-image: url(${img});\r\n  background-position: 0% 50%;\r\n  background-size: cover;\r\n  -webkit-box-shadow: 0px 3px 20px -5px rgba(0,0,0,0.36);\r\n  -moz-box-shadow: 0px 3px 20px -5px rgba(0,0,0,0.36);\r\n  box-shadow: 0px 3px 20px -5px rgba(0,0,0,0.36);\r\n  color: white;\r\n  align-items: end;\r\n`;\r\n\r\nexport default Hero;","import styled from \"styled-components\";\r\n\r\nconst NavBar = styled.nav`\r\n  display: grid;\r\n  grid-column-start: 2;\r\n  grid-column-end: 3;\r\n  grid-row-start: 2;\r\n  grid-row-end: 4;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n\r\n  @media(max-width: 500px) {\r\n    grid-column-start: 1;\r\n    grid-column-end: 4;\r\n    }\r\n`;\r\n\r\nexport default NavBar;","import styled from \"styled-components\";\r\n\r\nconst NavBarItems = styled.div`\r\n    display: grid;\r\n    justify-items: center;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n`;\r\n\r\nexport default NavBarItems;","import styled from \"styled-components\";\r\n\r\nconst Section = styled.div`\r\n  display: grid;\r\n  height: 45%;\r\n    grid-template-columns: 20% auto 20%;\r\n  grid-template-rows: 1fr 10% 10%;\r\n`;\r\n\r\nexport default Section;","import * as React from \"react\";\r\n\r\nimport MenuItem from \"../MenuItem\";\r\nimport Hero from \"./Hero\";\r\nimport NavBar from \"./NavBar\";\r\nimport NavBarItems from \"./NavBarItems\";\r\nimport cpp from \"../../images/cpp.png\";\r\nimport csharp from \"../../images/csharp.png\";\r\nimport js from \"../../images/js.png\";\r\nimport Section from \"./Section\";\r\n\r\nconst MenuItems = [\r\n  { title: \"Js\", route: \"js\", image: js, color: '#80BC22' },\r\n  { title: \"c#\", route: \"csharp\", image: csharp, color: '#007BFB' },\r\n  { title: \"c++\", route: \"cplusplus\", image: cpp, color: '#01559D' }\r\n];\r\n\r\nconst Header: React.FunctionComponent = () => {\r\n  return (\r\n    <Section>\r\n      <Hero>\r\n      </Hero>\r\n      <NavBar>\r\n        <NavBarItems>\r\n          {\r\n            MenuItems.map(m => <MenuItem key={m.title} title={m.title} image={m.image} route={m.route} color={m.color} />)\r\n          }\r\n        </NavBarItems>\r\n      </NavBar>\r\n    </Section>\r\n\r\n  )\r\n}\r\n\r\nexport default Header;","export const blogsroute = \"json/blogs.json\";\r\nexport const postsroute = \"json/\";\r\n\r\nconst headers = {\r\n  'Content-Type': 'application/json',\r\n  'Accept': 'application/json'\r\n}\r\n\r\nasync function getAll<T>(route: string): Promise<T> {\r\n  const response = await fetch(`http://localhost:3000/${route}`, { method: 'GET', headers });\r\n\r\n  if (!response.ok)\r\n    throw new Error(`HTTP error status: ${response.status}`);\r\n\r\n  return response.json();\r\n}\r\n\r\nexport { getAll };","import * as React from \"react\";\r\n\r\nimport * as Api from \"../../Api\";\r\n\r\nimport moment from \"moment\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\ninterface IPost {\r\n  title: string;\r\n  date: string;\r\n  language: string;\r\n  framework: string;\r\n  file: string;\r\n  front: string;\r\n  readTime: number;\r\n  votes: number;\r\n}\r\n\r\ninterface IPostsContext {\r\n  posts: Array<IPost>;\r\n  sortOnDate: (filterState: FilterState) => void;\r\n  sortOnPopularity: (filterState: FilterState) => void;\r\n};\r\n\r\nexport enum FilterState {\r\n  ASC,\r\n  DESC,\r\n  None\r\n}\r\n\r\nexport const PostsContext: React.Context<IPostsContext> = React.createContext({} as IPostsContext);\r\n\r\nconst PostsWrapper: React.FunctionComponent = ({ children }) => {\r\n\r\n  const [posts, setPosts] = React.useState([] as Array<IPost>);\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    (async () => {\r\n      const posts = await Api.getAll<{blogs: Array<IPost>}>(Api.blogsroute);\r\n      console.log(\"test1\");\r\n      setPosts(posts.blogs);\r\n    })();\r\n  }, [])\r\n\r\n  React.useEffect(() => {\r\n    if (location.pathname !== \"/\")\r\n      filterOnLanguage(location.pathname.substr(1));\r\n\r\n  }, [location]);\r\n\r\n  const filterOnLanguage = async (filter: string) => {\r\n\r\n    let filtered = (await Api.getAll<{blogs: Array<IPost>}>(Api.blogsroute)).blogs;\r\n    filtered = filtered.filter(b => b.language === filter);\r\n\r\n    console.log(\"test2\");\r\n    setPosts(filtered);\r\n  }\r\n\r\n  const filterOnTitle = () => {\r\n\r\n  }\r\n\r\n  const sortOnDate = async(filterState: FilterState) => {\r\n    let sorted = (await Api.getAll<{blogs: Array<IPost>}>(Api.blogsroute)).blogs;\r\n\r\n    if (filterState === FilterState.ASC)\r\n      sorted.sort((a, b) => moment(a.date).diff(moment(b.date)));\r\n    else\r\n      sorted.sort((a, b) => moment(b.date).diff(moment(a.date)));\r\n\r\n    setPosts({ ...sorted });\r\n  }\r\n\r\n  const sortOnPopularity = (filterState: FilterState) => {\r\n    let sorted: Array<IPost> = posts;\r\n\r\n    if (filterState === FilterState.ASC)\r\n      sorted.sort((a, b) => a.votes - b.votes);\r\n    else\r\n      sorted.sort((a, b) => b.votes - a.votes);\r\n\r\n    setPosts(sorted);\r\n  }\r\n\r\n  return (\r\n    <PostsContext.Provider value={{ posts, sortOnDate, sortOnPopularity }}>\r\n      {children}\r\n    </PostsContext.Provider>\r\n  )\r\n}\r\n\r\nexport default PostsWrapper;","import styled from \"styled-components\";\r\n\r\nconst Button = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 10px auto;\r\n  align-items: center;\r\n  gap: 0px 5px;\r\n`;\r\n\r\nexport default Button;","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport styled from \"styled-components\";\r\n\r\nconst Icon = styled(FontAwesomeIcon)`\r\n  grid-column: 1;\r\n`;\r\n\r\nexport const EmptyIcon = styled.div`\r\n  grid-column: 1;\r\n`;\r\n\r\nexport default Icon;","import * as React from \"react\";\r\n\r\nimport { FilterState } from \"../PostsWrapper\"\r\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\r\nimport Button from \"./Button\";\r\nimport Icon, { EmptyIcon } from \"./Icon\";\r\n\r\ninterface IProps {\r\n  title: string;\r\n  isSelected: boolean;\r\n  setFilter: (selected: string, filterState: FilterState) => void;\r\n}\r\n\r\nconst SortItem: React.FunctionComponent<IProps> = ({ title, isSelected, setFilter }) => {\r\n\r\n  const [filterState, setFilterState] = React.useState(FilterState.None);\r\n  const [clickCount, setClickCount] = React.useState(0);\r\n\r\n  let icon = <EmptyIcon></EmptyIcon>;\r\n\r\n  React.useEffect(() => {\r\n\r\n    if(isSelected && clickCount === 0)\r\n      setClickCount(1);\r\n\r\n    if (clickCount === 0)\r\n      setFilterState(FilterState.None);\r\n    else if (clickCount === 1)\r\n      setFilterState(FilterState.DESC);\r\n    else\r\n      setFilterState(FilterState.ASC);\r\n\r\n    if (!isSelected) {\r\n      setFilterState(FilterState.None);\r\n      setClickCount(0);\r\n    }\r\n      \r\n\r\n  }, [clickCount, isSelected]);\r\n\r\n\r\n  if (filterState === FilterState.ASC)\r\n    icon = <Icon icon={faAngleUp}/>;\r\n  else if (filterState === FilterState.DESC)\r\n    icon = <Icon icon={faAngleDown}/>;\r\n  else\r\n    icon = <EmptyIcon></EmptyIcon>;\r\n\r\n  return (\r\n    <Button\r\n      onClick={() => { setClickCount(clickCount < 2 ? clickCount + 1 : 0); setFilter(title, filterState)}}\r\n    >\r\n      {icon}\r\n      <h4>{title}</h4>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default SortItem;","import styled from \"styled-components\";\r\n\r\nconst Header = styled.nav`\r\n  display: grid;\r\n  grid-column: 2;\r\n  grid-row-start: 2;\r\n  grid-row-end: 3;\r\n\r\n  grid-template-columns: auto auto 1fr;\r\n  justify-items: left;\r\n\r\n  gap: 5%;\r\n`;\r\n\r\nexport default Header;","import * as React from \"react\";\r\n\r\nimport { FilterState } from \"../PostsWrapper\"\r\nimport SortItem from \"../SortItem\";\r\nimport Header from \"./Header\";\r\n\r\nconst PostsHeader: React.FunctionComponent = () => {\r\n  const [selected, setSelected] = React.useState(\"\");\r\n\r\n  const setFilter = (title: string, filterState: FilterState) => {\r\n    setSelected(title);\r\n  }\r\n    \r\n  return (\r\n    <Header>\r\n      <SortItem title={\"Date\"} setFilter={setFilter} isSelected={selected === \"Date\"} />\r\n      <SortItem title={\"Popularity\"} setFilter={setFilter} isSelected={selected === \"Popularity\"} />\r\n    </Header>\r\n  )\r\n}\r\n\r\nexport default PostsHeader;\r\n","import styled from \"styled-components\";\r\n\r\ninterface IProps {\r\n  isMaximized: boolean;\r\n}\r\n\r\nconst Article = styled.article<IProps>`\r\n  display: grid;\r\n  border: 1px solid lightgray;\r\n  border-radius: 5px;\r\n  grid-template-columns: 2vw 1fr 2vw;\r\n  grid-template-rows: 5vh auto ${props => props.isMaximized ? 'auto' : '30vh' } auto;\r\n`;\r\n\r\nexport default Article;","import styled from \"styled-components\";\r\n\r\nconst PostDate = styled.p`\r\n  color: lightgrey;\r\n  grid-column: 2;\r\n  grid-row: 1;\r\n  justify-self: left;\r\n`;\r\n\r\nexport default PostDate;\r\n","import styled from \"styled-components\";\r\n\r\nconst Text = styled.div`\r\n  grid-column: 2;\r\n  grid-row-start: 3;\r\n  grid-row-end: 4;\r\n  overflow-y: hidden;\r\n`;\r\n\r\nexport default Text;","import styled from \"styled-components\";\r\n\r\nconst Title = styled.p`\r\n  font-size: 2rem;\r\n  font-weight: 600;\r\n  grid-column: 2;\r\n  grid-row: 2;\r\n  justify-self: left;\r\n\r\n  @media(max-width: 500px) {\r\n    font-size: 1.3rem;\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nexport default Title;","import styled from \"styled-components\";\r\n\r\nconst VoteContainer = styled.p`\r\n  display: grid;\r\n  grid-column: 2;\r\n  grid-row: 1;\r\n  justify-self: right;\r\n  grid-template-columns: auto auto;\r\n  gap: 10px;\r\n`;\r\n\r\nexport default VoteContainer;","import styled from \"styled-components\";\r\n\r\nconst VoteCount = styled.p`\r\n  margin: 0;\r\n  grid-column: 1;\r\n`;\r\n\r\nexport default VoteCount;","import styled from \"styled-components\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nconst VoteIcon = styled(FontAwesomeIcon)`\r\n  grid-column: 2;\r\n  cursor: pointer;\r\n  color: ${props => props.color};\r\n  &:hover {\r\n    color: #007BFB;\r\n  }\r\n`;\r\n\r\nexport default VoteIcon;","import * as React from \"react\";\r\n\r\nimport { faThumbsUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport VoteContainer from \"./VoteContainer\";\r\nimport VoteCount from \"./VoteCount\";\r\nimport VoteIcon from \"./VoteIcon\";\r\n\r\ninterface IProps {\r\n  nrOfVotes: number;\r\n  changeVote: (isVote: boolean) => void;\r\n}\r\n\r\nconst Vote: React.FunctionComponent<IProps> = ({ changeVote, nrOfVotes = 0 }) => {\r\n  const [votes, setVote] = React.useState(nrOfVotes);\r\n  const [isVote, setIsVote] = React.useState(false);\r\n\r\n  const onVoteChange = () => {\r\n    if(isVote)\r\n      setVote(votes - 1);\r\n    else  \r\n      setVote(votes + 1);\r\n\r\n    changeVote(!isVote);\r\n    setIsVote(!isVote);\r\n  }\r\n\r\n  return(\r\n    <VoteContainer>\r\n      <VoteCount>{votes}</VoteCount>\r\n      <VoteIcon icon={faThumbsUp} onClick={onVoteChange} color={isVote ? \"#007BFB\" : \"black\"}/>\r\n    </VoteContainer>\r\n  )\r\n}\r\n\r\nexport default Vote;","import styled from \"styled-components\";\r\n\r\nconst MaximizeButton = styled.div`\r\n  color: lightgrey;\r\n  grid-column: 2;\r\n  grid-row-start: 4;\r\n  grid-row-end: 5;\r\n  justify-self: right;\r\n  color: #007BFB;\r\n  padding: 1vh 0vw;\r\n`;\r\n\r\nexport default MaximizeButton;\r\n","import * as React from \"react\";\r\n\r\nimport Article from \"./Article\";\r\nimport moment from \"moment\";\r\nimport PostDate from \"./PostDate\";\r\nimport Text from \"./Text\";\r\nimport Title from \"./Title\";\r\nimport Vote from \"./Vote\";\r\nimport MaximizeButton from \"./MaximizeButton\";\r\nimport * as Api from \"../../Api\";\r\n\r\ninterface IProps {\r\n  title: string;\r\n  date: string;\r\n  language: string;\r\n  framework: string;\r\n  file: string;\r\n  votes: number;\r\n}\r\n\r\nconst Post: React.FunctionComponent<IProps> = ({ title, date, votes, file }) => {\r\n\r\n  const [isMaximized, setIsMaximized] = React.useState(false);\r\n  const [innerHtml, setInnerHtml] = React.useState(\"\");\r\n\r\n  React.useEffect(() => {\r\n    (async() => {\r\n      if(file !== \"\") {\r\n        const html = (await Api.getAll<{html: string}>(Api.postsroute + file)).html;\r\n        setInnerHtml(html);\r\n      }\r\n    })();\r\n  }, [innerHtml, file]);\r\n\r\n  return (\r\n    <Article isMaximized={isMaximized} >\r\n      <PostDate>Date: {moment(new Date()).format(\"DD-MMM-YYYY\")}</PostDate>\r\n      <Vote changeVote={() => { }} nrOfVotes={votes} />\r\n      <Title>{title}</Title>\r\n\r\n      <Text dangerouslySetInnerHTML={{__html: innerHtml}}>\r\n      </Text>\r\n      <MaximizeButton onClick={() => setIsMaximized(!isMaximized)}>\r\n        {\r\n          !isMaximized ? \r\n          \"Continue reading...\"\r\n          : \"Stop reading\"\r\n        }\r\n      </MaximizeButton>\r\n    </Article>\r\n  )\r\n}\r\n\r\nexport default Post;","import styled from \"styled-components\";\r\n\r\nconst List = styled.section`\r\n  display: grid;\r\n  grid-row-start: 3;\r\n  grid-row-end: 4;\r\n  grid-column-start: 2;\r\n  grid-column-end: 3;\r\n  grid-auto-rows: minmax(30vh, auto);\r\n  gap: 1vh;\r\n`;\r\n\r\nexport default List;","import * as React from \"react\";\r\n\r\nimport { PostsContext } from \"../PostsWrapper\";\r\nimport Post from \"../Post\"\r\nimport List from \"./List\";\r\n\r\nconst Posts: React.FunctionComponent = () => {\r\n  const { posts } = React.useContext(PostsContext);\r\n\r\n  return (\r\n    <List>\r\n      {\r\n        posts.map((b, i) => <Post key={b.title + i} {...b} />)\r\n      }\r\n    </List>\r\n  )\r\n}\r\n\r\nexport default Posts;","import styled from \"styled-components\";\r\n\r\nconst Content = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 20% 1fr 20%;\r\n  grid-template-rows: 1vh auto auto;\r\n  gap: 2vh;\r\n\r\n  @media(max-width: 500px) {\r\n    grid-template-columns: auto 1fr auto;\r\n    }\r\n`;\r\n\r\nexport default Content;","import * as React from \"react\";\n\nimport Page from \"./Page\";\nimport Header from \"./components/Header\";\nimport PostsHeader from \"./components/PostsHeader\";\nimport Posts from \"./components/Posts\";\nimport PostsWrapper from \"./components/PostsWrapper\";\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport Content from \"./components/Content\";\n\nconst App: React.FunctionComponent = () => (\n  <BrowserRouter>\n    <PostsWrapper>\n      <Page>\n        <Header />\n        <Content>\n          <PostsHeader />\n          <Posts />\n        </Content>\n      </Page>\n    </PostsWrapper>\n  </BrowserRouter>\n\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}